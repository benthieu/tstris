!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function o(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function i(t){return"function"==typeof t}var s=!1,u={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function c(t){setTimeout((function(){throw t}),0)}var a={closed:!0,next:function(t){},error:function(t){if(u.useDeprecatedSynchronousErrorHandling)throw t;c(t)},complete:function(){}},f=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function p(t){return null!==t&&"object"==typeof t}var h=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),l=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var n;if(!this.closed){var e=this._parentOrParents,r=this._ctorUnsubscribe,o=this._unsubscribe,s=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,e instanceof t)e.remove(this);else if(null!==e)for(var u=0;u<e.length;++u){e[u].remove(this)}if(i(o)){r&&(this._unsubscribe=void 0);try{o.call(this)}catch(t){n=t instanceof h?y(t.errors):[t]}}if(f(s)){u=-1;for(var c=s.length;++u<c;){var a=s[u];if(p(a))try{a.unsubscribe()}catch(t){n=n||[],t instanceof h?n=n.concat(y(t.errors)):n.push(t)}}}if(n)throw new h(n)}},t.prototype.add=function(n){var e=n;if(!n)return t.EMPTY;switch(typeof n){case"function":e=new t(n);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var r=e;(e=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var o=e._parentOrParents;if(null===o)e._parentOrParents=this;else if(o instanceof t){if(o===this)return e;e._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return e;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[e]:i.push(e),e},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function y(t){return t.reduce((function(t,n){return t.concat(n instanceof h?n.errors:n)}),[])}var d=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),w=function(t){function n(e,r,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=a;break;case 1:if(!e){i.destination=a;break}if("object"==typeof e){e instanceof n?(i.syncErrorThrowable=e.syncErrorThrowable,i.destination=e,e.add(i)):(i.syncErrorThrowable=!0,i.destination=new b(i,e));break}default:i.syncErrorThrowable=!0,i.destination=new b(i,e,r,o)}return i}return o(n,t),n.prototype[d]=function(){return this},n.create=function(t,e,r){var o=new n(t,e,r);return o.syncErrorThrowable=!1,o},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(l),b=function(t){function n(n,e,r,o){var s,u=t.call(this)||this;u._parentSubscriber=n;var c=u;return i(e)?s=e:e&&(s=e.next,r=e.error,o=e.complete,e!==a&&(i((c=Object.create(e)).unsubscribe)&&u.add(c.unsubscribe.bind(c)),c.unsubscribe=u.unsubscribe.bind(u))),u._context=c,u._next=s,u._error=r,u._complete=o,u}return o(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;u.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,e=u.useDeprecatedSynchronousErrorHandling;if(this._error)e&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)e?(n.syncErrorValue=t,n.syncErrorThrown=!0):c(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;c(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};u.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),u.useDeprecatedSynchronousErrorHandling)throw t;c(t)}},n.prototype.__tryOrSetError=function(t,n,e){if(!u.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,e)}catch(n){return u.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(c(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(w);var v=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function _(t){return t}function m(t){return 0===t.length?_:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var g=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r=this.operator,o=function(t,n,e){if(t){if(t instanceof w)return t;if(t[d])return t[d]()}return t||n||e?new w(t,n,e):new w(a)}(t,n,e);if(r?o.add(r.call(o,this.source)):o.add(this.source||u.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),u.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){u.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),!function(t){for(;t;){var n=t,e=n.closed,r=n.destination,o=n.isStopped;if(e||o)return!1;t=r&&r instanceof w?r:null}return!0}(t)?console.warn(n):t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=O(n))((function(n,r){var o;o=e.subscribe((function(n){try{t(n)}catch(t){r(t),o&&o.unsubscribe()}}),r,n)}))},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[v]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:m(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=O(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function O(t){if(t||(t=u.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function S(t,n){return function(e){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return e.lift(new E(t,n))}}var E=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new x(t,this.project,this.thisArg))},t}(),x=function(t){function n(n,e,r){var o=t.call(this,n)||this;return o.project=e,o.count=0,o.thisArg=r||o,o}return o(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(w);function P(t,n,e,r){return i(e)&&(r=e,e=void 0),r?P(t,n,e).pipe(S((function(t){return f(t)?r.apply(void 0,t):r(t)}))):new g((function(r){!function t(n,e,r,o,i){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(n)){var u=n;n.addEventListener(e,r,i),s=function(){return u.removeEventListener(e,r,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(n)){var c=n;n.on(e,r),s=function(){return c.off(e,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(n)){var a=n;n.addListener(e,r),s=function(){return a.removeListener(e,r)}}else{if(!n||!n.length)throw new TypeError("Invalid event target");for(var f=0,p=n.length;f<p;f++)t(n[f],e,r,o,i)}o.add(s)}(t,n,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,e)}))}function I(t){return t&&"function"==typeof t.schedule}var j=function(t){return function(n){for(var e=0,r=t.length;e<r&&!n.closed;e++)n.next(t[e]);n.complete()}};function T(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var R=T(),k=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function A(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var D=function(t){if(t&&"function"==typeof t[v])return r=t,function(t){var n=r[v]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if(k(t))return j(t);if(A(t))return e=t,function(t){return e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,c),t};if(t&&"function"==typeof t[R])return n=t,function(t){for(var e=n[R]();;){var r=void 0;try{r=e.next()}catch(n){return t.error(n),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof e.return&&t.add((function(){e.return&&e.return()})),t};var n,e,r,o=p(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+o+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function L(t,n){return new g((function(e){var r=new l,o=0;return r.add(n.schedule((function(){o!==t.length?(e.next(t[o++]),e.closed||r.add(this.schedule())):e.complete()}))),r}))}function N(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[v]}(t))return function(t,n){return new g((function(e){var r=new l;return r.add(n.schedule((function(){var o=t[v]();r.add(o.subscribe({next:function(t){r.add(n.schedule((function(){return e.next(t)})))},error:function(t){r.add(n.schedule((function(){return e.error(t)})))},complete:function(){r.add(n.schedule((function(){return e.complete()})))}}))}))),r}))}(t,n);if(A(t))return function(t,n){return new g((function(e){var r=new l;return r.add(n.schedule((function(){return t.then((function(t){r.add(n.schedule((function(){e.next(t),r.add(n.schedule((function(){return e.complete()})))})))}),(function(t){r.add(n.schedule((function(){return e.error(t)})))}))}))),r}))}(t,n);if(k(t))return L(t,n);if(function(t){return t&&"function"==typeof t[R]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new g((function(e){var r,o=new l;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(n.schedule((function(){r=t[R](),o.add(n.schedule((function(){if(!e.closed){var t,n;try{var o=r.next();t=o.value,n=o.done}catch(t){return void e.error(t)}n?e.complete():(e.next(t),this.schedule())}})))}))),o}))}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}var C=function(t){function n(n){var e=t.call(this)||this;return e.parent=n,e}return o(n,t),n.prototype._next=function(t){this.parent.notifyNext(t)},n.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},n}(w),F=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return o(n,t),n.prototype.notifyNext=function(t){this.destination.next(t)},n.prototype.notifyError=function(t){this.destination.error(t)},n.prototype.notifyComplete=function(){this.destination.complete()},n}(w);function M(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?function(r){return r.pipe(M((function(e,r){return(o=t(e,r),i?N(o,i):o instanceof g?o:new g(D(o))).pipe(S((function(t,o){return n(e,t,r,o)})));var o,i}),e))}:("number"==typeof n&&(e=n),function(n){return n.lift(new H(t,e))})}var H=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new B(t,this.project,this.concurrent))},t}(),B=function(t){function n(n,e,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var o=t.call(this,n)||this;return o.project=e,o.concurrent=r,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return o(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n)},n.prototype._innerSub=function(t){var n=new C(this),e=this.destination;e.add(n);var r=function(t,n){if(!n.closed)return t instanceof g?t.subscribe(n):D(t)(n)}(t,n);r!==n&&e.add(r)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t){this.destination.next(t)},n.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}(F);function U(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),M(_,t)}function V(t,n){return n?L(t,n):new g(j(t))}var Y=function(){function t(t,n){this.compare=t,this.keySelector=n}return t.prototype.call=function(t,n){return n.subscribe(new z(t,this.compare,this.keySelector))},t}(),z=function(t){function n(n,e,r){var o=t.call(this,n)||this;return o.keySelector=r,o.hasKey=!1,"function"==typeof e&&(o.compare=e),o}return o(n,t),n.prototype.compare=function(t,n){return t===n},n.prototype._next=function(t){var n;try{var e=this.keySelector;n=e?e(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,n)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=n,this.destination.next(t))},n}(w),G=function(){function t(t,n){var e,r;this.playground=t,this.painter=n,this.keyDown=P(document,"keydown"),this.keyUp=P(document,"keyup"),this.keyEvents=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Number.POSITIVE_INFINITY,r=null,o=t[t.length-1];return I(o)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(e=t.pop())):"number"==typeof o&&(e=t.pop()),null===r&&1===t.length&&t[0]instanceof g?t[0]:U(e)(V(t,r))}(this.keyDown,this.keyUp).pipe((e=function(t,n){return t.code===n.code&&t.type===n.type},function(t){return t.lift(new Y(e,r))})),this.registerEvents()}return t.prototype.startEventAndInterval=function(t){var n=this;t(),this.painter.drawPlayground(),this.keyDownInterval=setInterval((function(){t(),n.painter.drawPlayground()}),500)},t.prototype.setMoveDownInterval=function(){var t=this;this.moveDownInterval=setInterval((function(){t.playground.moveDown(),t.painter.drawPlayground()}),750)},t.prototype.registerEvents=function(){var t=this;this.setMoveDownInterval(),this.keyEvents.subscribe((function(n){if("keydown"!==n.type||t.keyDownInterval)"keyup"===n.type&&("ArrowDown"===n.code&&t.setMoveDownInterval(),clearInterval(t.keyDownInterval),t.keyDownInterval=null);else switch(n.code){case"ArrowUp":t.startEventAndInterval((function(){return t.playground.rotate()}));break;case"ArrowLeft":t.startEventAndInterval((function(){return t.playground.moveLeft()}));break;case"ArrowRight":t.startEventAndInterval((function(){return t.playground.moveRight()}));break;case"ArrowDown":clearInterval(t.moveDownInterval),t.startEventAndInterval((function(){return t.playground.moveDown()}))}}))},t}(),K=function(){function t(t,n){this.canvasRendering=t,this.playground=n,this.defaultFillStyle="#FFF",this.defaultStrokeStyle="#FFF",this.width=t.canvas.width,this.height=t.canvas.height}return t.prototype.drawPlayground=function(){var t=Math.floor(this.height/this.playground.rows),n=Math.floor(this.width/this.playground.cols);this.canvasRendering.fillStyle=this.defaultFillStyle,this.canvasRendering.strokeStyle=this.defaultStrokeStyle,this.canvasRendering.clearRect(0,0,this.width,this.height);for(var e=function(e){for(var o=function(o){var i=n*o,s=t*e,u=r.playground.getPlayground().find((function(t){return t.x===o&&t.y===e}));u?(r.canvasRendering.fillStyle=u.color?u.color:r.defaultFillStyle,r.canvasRendering.fillRect(i,s,n,t)):r.canvasRendering.strokeRect(i,s,n,t)},i=0;i<r.playground.cols;i++)o(i)},r=this,o=0;o<this.playground.rows;o++)e(o)},t}(),q=function(){function t(t,n,e){void 0===e&&(e=""),this.x=t,this.y=n,this.color=e}return t.prototype.moveRight=function(){this.x++},t.prototype.moveLeft=function(){this.x--},t.prototype.moveUp=function(){this.y--},t.prototype.moveDown=function(){this.y++},t.prototype.copy=function(){return new t(this.x,this.y,this.color)},t}(),J=function(){function t(t,n,e){void 0===e&&(e="#FFF"),this.rotations=t,this.size=n,this.color=e,this.currentRotation=0}return t.prototype.initPointer=function(){var t=Math.floor((this.playground.cols-this.size)/2);this.pointer=new q(t,-(this.size-2))},t.prototype.setPlayground=function(t){this.playground=t},t.prototype.rotate=function(){return this.currentRotation=this.currentRotation+1>=this.rotations.length?0:this.currentRotation+1,this},t.prototype.moveRight=function(){return this.pointer.moveRight(),this},t.prototype.moveLeft=function(){return this.pointer.moveLeft(),this},t.prototype.moveDown=function(){return this.pointer.moveDown(),this},t.prototype.copy=function(){var n=new t(this.rotations,this.size);return n.currentRotation=this.currentRotation,n.pointer=this.pointer.copy(),n},t.prototype.calculateCoordinates=function(t){var n=this;return void 0===t&&(t=this.pointer),this.getCurrentRotation().map((function(e){return{x:t.x+e.x,y:t.y+e.y,color:n.color}}))},t.prototype.getCurrentRotation=function(){return this.rotations[this.currentRotation]},t}(),Q=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),W=function(t){function n(){return t.call(this,[[new q(0,0),new q(0,1),new q(1,0),new q(1,1)]],2,"#ff5722")||this}return Q(n,t),n}(J),X=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Z=function(t){function n(){return t.call(this,[[new q(0,0),new q(1,0),new q(1,1),new q(1,2)],[new q(0,1),new q(1,1),new q(2,1),new q(2,0)],[new q(1,0),new q(1,1),new q(1,2),new q(2,2)],[new q(0,1),new q(1,1),new q(2,1),new q(0,2)]],3,"#ffc107")||this}return X(n,t),n}(J),$=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),tt=function(t){function n(){return t.call(this,[[new q(1,0),new q(2,0),new q(1,1),new q(1,2)],[new q(0,1),new q(1,1),new q(2,1),new q(2,2)],[new q(1,0),new q(1,1),new q(1,2),new q(0,2)],[new q(0,0),new q(0,1),new q(1,1),new q(2,1)]],3,"#8bc34a")||this}return $(n,t),n}(J),nt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),et=function(t){function n(){return t.call(this,[[new q(1,0),new q(1,1),new q(1,2),new q(1,3)],[new q(0,1),new q(1,1),new q(2,1),new q(3,1)],[new q(2,0),new q(2,1),new q(2,2),new q(2,3)],[new q(0,1),new q(1,1),new q(2,1),new q(3,1)]],4,"#009688")||this}return nt(n,t),n}(J),rt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),ot=function(t){function n(){return t.call(this,[[new q(1,1),new q(2,1),new q(0,2),new q(1,2)],[new q(0,0),new q(0,1),new q(1,1),new q(1,2)],[new q(0,1),new q(1,1),new q(1,0),new q(2,0)],[new q(1,0),new q(1,1),new q(2,1),new q(2,2)]],3,"#03a9f4")||this}return rt(n,t),n}(J),it=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),st=function(t){function n(){return t.call(this,[[new q(0,1),new q(1,0),new q(1,1),new q(1,2)],[new q(1,0),new q(0,1),new q(1,1),new q(2,1)],[new q(1,0),new q(1,1),new q(1,2),new q(2,1)],[new q(0,1),new q(1,1),new q(2,1),new q(1,2)]],3,"#673ab7")||this}return it(n,t),n}(J),ut=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),ct=function(t){function n(){return t.call(this,[[new q(0,1),new q(1,1),new q(1,2),new q(2,2)],[new q(0,1),new q(0,2),new q(1,1),new q(1,0)],[new q(0,0),new q(1,0),new q(1,1),new q(2,1)],[new q(2,0),new q(1,1),new q(1,2),new q(2,1)]],3,"#e91e63")||this}return ut(n,t),n}(J),at=function(){for(var t=0,n=0,e=arguments.length;n<e;n++)t+=arguments[n].length;var r=Array(t),o=0;for(n=0;n<e;n++)for(var i=arguments[n],s=0,u=i.length;s<u;s++,o++)r[o]=i[s];return r},ft=function(){function t(t,n){this.rows=t,this.cols=n}return t.prototype.startNewGame=function(){this.allPointers=new Array,this.insertNewShape()},t.prototype.insertNewShape=function(){this.shape=this.getRandomShape(),this.shape.setPlayground(this),this.shape.initPointer(),this.detectCollisionOrOutOfBounds(this.shape)&&this.startNewGame()},t.prototype.getPlayground=function(){return at(this.allPointers,this.shape.calculateCoordinates())},t.prototype.getCurrentShape=function(){return this.shape},t.prototype.moveRight=function(){this.detectCollisionOrOutOfBounds(this.shape.copy().moveRight())||this.shape.moveRight()},t.prototype.moveLeft=function(){this.detectCollisionOrOutOfBounds(this.shape.copy().moveLeft())||this.shape.moveLeft()},t.prototype.moveDown=function(){var t;this.detectCollisionOrOutOfBounds(this.shape.copy().moveDown())?((t=this.allPointers).push.apply(t,this.shape.calculateCoordinates()),this.detectAndRemoveFullLine(),this.insertNewShape()):this.shape.moveDown()},t.prototype.rotate=function(){var t=this.shape.copy();t.rotate(),this.detectCollisionOrOutOfBounds(t)?this.detectCollisionOrOutOfBounds(t.copy().moveRight())?this.detectCollisionOrOutOfBounds(t.copy().moveLeft())?this.detectCollisionOrOutOfBounds(t.copy().moveRight().moveRight())?this.detectCollisionOrOutOfBounds(t.copy().moveLeft().moveLeft())||(this.shape.moveLeft(),this.shape.moveLeft(),this.shape.rotate()):(this.shape.moveRight(),this.shape.moveRight(),this.shape.rotate()):(this.shape.moveLeft(),this.shape.rotate()):(this.shape.moveRight(),this.shape.rotate()):this.shape.rotate()},t.prototype.detectCollisionOrOutOfBounds=function(t){var n=this,e=t.calculateCoordinates().find((function(t){return t.x<0||t.x>=n.cols||t.y>=n.rows})),r=t.calculateCoordinates().find((function(t){return!!n.allPointers.find((function(n){return n.x===t.x&&n.y===t.y}))}));return!!e||!!r},t.prototype.detectAndRemoveFullLine=function(){var t=this;this.detectFullLine().forEach((function(n){t.allPointers=t.allPointers.filter((function(t){return t.y!==n})),t.allPointers=t.allPointers.map((function(t){return t.y<n&&t.y++,t}))}))},t.prototype.detectFullLine=function(){for(var t=new Array,n=function(n){e.allPointers.filter((function(t){return t.y===n})).length===e.cols&&t.push(n)},e=this,r=0;r<this.rows;r++)n(r);return t},t.prototype.getRandomShape=function(){switch(Math.round(6*Math.random())){case 0:return new W;case 1:return new Z;case 2:return new tt;case 3:return new et;case 4:return new ot;case 5:return new st;case 6:return new ct}},t}();new function(t){this.cols=8,this.rows=15,this.playground=new ft(this.rows,this.cols),this.painter=new K(t,this.playground),this.events=new G(this.playground,this.painter),this.playground.startNewGame(),this.painter.drawPlayground()}(document.getElementById("main").getContext("2d"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,